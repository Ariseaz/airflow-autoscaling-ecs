Description: Creates IAM Resources

Resources:
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "{{ serviceName }}-{{ ENVIRONMENT }}-ecs-task-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "ECSTaskRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"


Outputs:
  ECSTaskRoleARN:
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: "iam-ECSTaskRoleArn"



















Resources:
  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow workers
      GroupName: "airflow-dev-workers-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: "10.0.0.0/16"
          FromPort: "8793"
          IpProtocol: tcp
          ToPort: "8793"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-workers-security-group"

  WorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024"
      Memory: "2048"
      ExecutionRoleArn: !ImportValue iam-ECSTaskRoleArn
      Family: "airflow-dev-workers-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "airflow-dev-workers"
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${ecr_repository}:latest"
            - ecr_repository: !ImportValue ecr-AirflowDockerRepositoryName
          Essential: true
          PortMappings:
            - ContainerPort: "8793"
              HostPort: "8793"
          Command:
            - worker
          Environment:
            - Name: REDIS_HOST
              Value: !ImportValue redis-CeleryBackendHost
            - Name: REDIS_PORT
              Value: !ImportValue redis-CeleryBackendPort
            - Name: POSTGRES_HOST
              Value: !ImportValue database-MetadataDBInstanceHost
            - Name: POSTGRES_PORT
              Value: !ImportValue database-MetadataDBInstancePort
            - Name: POSTGRES_USER
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]]
            - Name: POSTGRES_PASSWORD
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]]
            - Name: POSTGRES_DB
              Value: "airflow"
            - Name: AIRFLOW_BASE_URL
              Value: "http://localhost:8080"
            - Name: ENABLE_REMOTE_LOGGING
              Value: False
            - Name: STAGE
              Value: "dev"
            - Name: FERNET_KEY
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AirflowFernetKeySecretId, ':SecretString:fernet_key}}' ]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue cloudwatch-AirflowECSLogGroupName
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: workers
      Tags:
        - Key: Name
          Value: "airflow-dev-workers-task-definition"

  WorkersEcsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "airflow-dev-workers"
      Cluster: !ImportValue ecs-AirflowECSClusteArn
      TaskDefinition: !Ref WorkerTaskDefinition
      LaunchType: FARGATE
      DesiredCount: "2"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref WorkerSecurityGroup
          Subnets:
            - !ImportValue network-PublicSubnet1Id
            - !ImportValue network-PublicSubnet2Id
            - !ImportValue network-PublicSubnet3Id

  WorkersScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: "8"
      MinCapacity: "2"
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join ["/", [service, !ImportValue ecs-AirflowECSClusterId, !GetAtt WorkersEcsService.Name]]

  WorkersServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-workers-tracking-cpu"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WorkersScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "70"
        ScaleInCooldown: "60"
        ScaleOutCooldown: "120"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  WorkersServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-workers-tracking-memory"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WorkersScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "70"
        ScaleInCooldown: "60"
        ScaleOutCooldown: "120"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  WebserverExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow webserver. Allow all inbound traffic.
      GroupName: "airflow-dev-webserver-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "80"
          IpProtocol: tcp
          ToPort: "80"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-webserver-security-group"

  WebserverInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow webserver.
      GroupName: "airflow-dev-webserver-internal-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt WebserverExternalSecurityGroup.GroupId
          FromPort: "8080"
          IpProtocol: tcp
          ToPort: "8080"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-webserver-internal-security-group"

  WebserverTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024"
      Memory: "2048"
      ExecutionRoleArn: !ImportValue iam-ECSTaskRoleArn
      Family: "airflow-dev-webserver-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "airflow-dev-webserver"
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${ecr_repository}:latest"
            - ecr_repository: !ImportValue ecr-AirflowDockerRepositoryName
          Essential: true
          PortMappings:
            - ContainerPort: "8080"
              HostPort: "8080"
          Command:
            - webserver
          Environment:
            - Name: REDIS_HOST
              Value: !ImportValue redis-CeleryBackendHost
            - Name: REDIS_PORT
              Value: !ImportValue redis-CeleryBackendPort
            - Name: POSTGRES_HOST
              Value: !ImportValue database-MetadataDBInstanceHost
            - Name: POSTGRES_PORT
              Value: !ImportValue database-MetadataDBInstancePort
            - Name: POSTGRES_USER
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]]
            - Name: POSTGRES_PASSWORD
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]]
            - Name: POSTGRES_DB
              Value: "airflow"
            - Name: AIRFLOW_BASE_URL
              Value: "http://localhost:8080"
            - Name: ENABLE_REMOTE_LOGGING
              Value: False
            - Name: STAGE
              Value: "dev"
            - Name: FERNET_KEY
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AirflowFernetKeySecretId, ':SecretString:fernet_key}}' ]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue cloudwatch-AirflowECSLogGroupName
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: webserver
      Tags:
        - Key: Name
          Value: "airflow-dev-webserver-task-definition"

  WebserverAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "airflow-dev-webserver-alb"
      Type: application
      SecurityGroups:
        - !Ref WebserverExternalSecurityGroup
      Subnets:
        - !ImportValue network-PublicSubnet1Id
        - !ImportValue network-PublicSubnet2Id
        - !ImportValue network-PublicSubnet3Id
      Tags:
        - Key: Name
          Value: "airflow-dev-webserver-alb"

  WebserverAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "airflow-dev-webserver-alb-tg"
      Port: "8080"
      Protocol: HTTP
      VpcId: !ImportValue network-VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: "airflow-dev-webserver-alb-tg"

  WebserverAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref WebserverAlbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref WebserverAlb
      Port: "80"
      Protocol: HTTP

  WebserverEcsService:
    Type: AWS::ECS::Service
    DependsOn: WebserverAlbListener
    Properties:
      ServiceName: "airflow-dev-webserver"
      Cluster: !ImportValue ecs-AirflowECSClusteArn
      TaskDefinition: !Ref WebserverTaskDefinition
      LaunchType: FARGATE
      DesiredCount: "1"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref WebserverInternalSecurityGroup
          Subnets:
            - !ImportValue network-PublicSubnet1Id
            - !ImportValue network-PublicSubnet2Id
            - !ImportValue network-PublicSubnet3Id
      LoadBalancers:
        - ContainerName: "airflow-dev-webserver"
          ContainerPort: "8080"
          TargetGroupArn: !Ref WebserverAlbTargetGroup

  WebserverScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: "3"
      MinCapacity: "1"
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join ["/", [service, !ImportValue ecs-AirflowECSClusterId, !GetAtt WebserverEcsService.Name]]

  WebserverServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-webserver-tracking-cpu"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebserverScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "60"
        ScaleInCooldown: "180"
        ScaleOutCooldown: "60"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  WebserverServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-webserver-tracking-memory"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WebserverScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "80"
        ScaleInCooldown: "180"
        ScaleOutCooldown: "60"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization


  SchedulerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow Scheduler
      GroupName: "airflow-dev-scheduler-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-scheduler-security-group"

  SchedulerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024"
      Memory: "2048"
      ExecutionRoleArn: !ImportValue iam-ECSTaskRoleArn
      Family: "airflow-dev-scheduler-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "airflow-dev-scheduler"
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${ecr_repository}:latest"
            - ecr_repository: !ImportValue ecr-AirflowDockerRepositoryName
          Essential: true
          Command:
            - scheduler
          Environment:
            - Name: REDIS_HOST
              Value: !ImportValue redis-CeleryBackendHost
            - Name: REDIS_PORT
              Value: !ImportValue redis-CeleryBackendPort
            - Name: POSTGRES_HOST
              Value: !ImportValue database-MetadataDBInstanceHost
            - Name: POSTGRES_PORT
              Value: !ImportValue database-MetadataDBInstancePort
            - Name: POSTGRES_USER
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]]
            - Name: POSTGRES_PASSWORD
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]]
            - Name: POSTGRES_DB
              Value: "airflow"
            - Name: AIRFLOW_BASE_URL
              Value: "http://localhost:8080"
            - Name: ENABLE_REMOTE_LOGGING
              Value: False
            - Name: STAGE
              Value: "dev"
            - Name: FERNET_KEY
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AirflowFernetKeySecretId, ':SecretString:fernet_key}}' ]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue cloudwatch-AirflowECSLogGroupName
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: scheduler
      Tags:
        - Key: Name
          Value: "airflow-dev-scheduler-task-definition"

  SchedulerEcsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "airflow-dev-scheduler"
      Cluster: !ImportValue ecs-AirflowECSClusteArn
      TaskDefinition: !Ref SchedulerTaskDefinition
      LaunchType: FARGATE
      DesiredCount: "1"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SchedulerSecurityGroup
          Subnets:
            - !ImportValue network-PublicSubnet1Id
            - !ImportValue network-PublicSubnet2Id
            - !ImportValue network-PublicSubnet3Id

  SchedulerScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: "2"
      MinCapacity: "1"
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join ["/", [service, !ImportValue ecs-AirflowECSClusterId, !GetAtt SchedulerEcsService.Name]]


  SchedulerServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-scheduler-tracking-cpu"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SchedulerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "70"
        ScaleInCooldown: "180"
        ScaleOutCooldown: "60"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  SchedulerServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-scheduler-tracking-memory"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SchedulerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "90"
        ScaleInCooldown: "180"
        ScaleOutCooldown: "60"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  FlowerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow Flower
      GroupName: "airflow-dev-flower-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "5555"
          IpProtocol: tcp
          ToPort: "5555"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-flower-security-group"

  FlowerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "512"
      Memory: "1024"
      ExecutionRoleArn: !ImportValue iam-ECSTaskRoleArn
      Family: "airflow-dev-flower-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "airflow-dev-flower"
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${ecr_repository}:latest"
            - ecr_repository: !ImportValue ecr-AirflowDockerRepositoryName
          Essential: true
          PortMappings:
            - ContainerPort: "5555"
              HostPort: "5555"
          Command:
            - flower
          Environment:
            - Name: REDIS_HOST
              Value: !ImportValue redis-CeleryBackendHost
            - Name: REDIS_PORT
              Value: !ImportValue redis-CeleryBackendPort
            - Name: POSTGRES_HOST
              Value: !ImportValue database-MetadataDBInstanceHost
            - Name: POSTGRES_PORT
              Value: !ImportValue database-MetadataDBInstancePort
            - Name: POSTGRES_USER
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]]
            - Name: POSTGRES_PASSWORD
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]]
            - Name: POSTGRES_DB
              Value: "airflow"
            - Name: AIRFLOW_BASE_URL
              Value: "http://localhost:8080"
            - Name: ENABLE_REMOTE_LOGGING
              Value: False
            - Name: STAGE
              Value: "dev"
            - Name: FERNET_KEY
              Value:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AirflowFernetKeySecretId, ':SecretString:fernet_key}}' ]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue cloudwatch-AirflowECSLogGroupName
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: flower
      Tags:
        - Key: Name
          Value: "airflow-dev-flower-task-definition"

  FlowerEcsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "airflow-dev-flower"
      Cluster: !ImportValue ecs-AirflowECSClusteArn
      TaskDefinition: !Ref FlowerTaskDefinition
      LaunchType: FARGATE
      DesiredCount: "1"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FlowerSecurityGroup
          Subnets:
            - !ImportValue network-PublicSubnet1Id
            - !ImportValue network-PublicSubnet2Id
            - !ImportValue network-PublicSubnet3Id

  FlowerScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: "2"
      MinCapacity: "1"
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join ["/", [service, !ImportValue ecs-AirflowECSClusterId, !GetAtt FlowerEcsService.Name]]


  FlowerServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-flower-tracking-cpu"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FlowerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "70"
        ScaleInCooldown: "180"
        ScaleOutCooldown: "60"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  FlowerServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "airflow-dev-flower-tracking-memory"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FlowerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "90"
        ScaleInCooldown: "180"
        ScaleOutCooldown: "60"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  AirflowECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "airflow-dev-ecs-cluster"
      Tags:
        - Key: Name
          Value: "airflow-dev-ecs-cluster"

  AirflowDockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: "{
          \"rules\": [
            {
              \"rulePriority\": 1,
              \"description\": \"Keep only the latest 10 images\",
              \"selection\": {
                \"tagStatus\": \"any\",
                \"countType\": \"imageCountMoreThan\",
                \"countNumber\": 10
              },
              \"action\": {
                \"type\": \"expire\"
              }
            }
          ]
        }"
      RepositoryName: "airflow-dev"
      Tags:
        - Key: Name
          Value: "airflow-dev-docker-ecr"

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: "airflow-dev-redis-subnet-group"
      Description: Redis Subnet Group
      SubnetIds:
        - !ImportValue network-PublicSubnet1Id
        - !ImportValue network-PublicSubnet2Id
        - !ImportValue network-PublicSubnet3Id

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redis
      GroupName: "airflow-dev-redis-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: "10.0.0.0/16"
          FromPort: "6379"
          IpProtocol: tcp
          ToPort: "6379"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-redis-security-group"

  CeleryBackend:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: "True"
      AZMode: "single-az"
      CacheNodeType: "cache.t3.small"
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      ClusterName: "airflow-dev-celery-cluster"
      Engine: "redis"
      EngineVersion: "4.0.10"
      NumCacheNodes: "1"
      Port: "6379"
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Name
          Value: "airflow-dev-celery-cluster"


  MetadataDBPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Postgres Metadata DB. Public access
      GroupName: "airflow-dev-metadata-db-public-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: "5432"
          IpProtocol: -1
          ToPort: "5432"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "5432"
          IpProtocol: tcp
          ToPort: "5432"
        - CidrIp: "10.0.0.0/16"
          FromPort: "5432"
          IpProtocol: tcp
          ToPort: "5432"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "airflow-dev-metadata-db-public-security-group"

  MetadataDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Postgres Metadata DB Subnet Group
      DBSubnetGroupName: "airflow-dev-metadata-db-subnet-group"
      SubnetIds:
        - !ImportValue network-PublicSubnet1Id
        - !ImportValue network-PublicSubnet2Id
        - !ImportValue network-PublicSubnet3Id
      Tags:
        - Key: Name
          Value: "airflow-dev-metadata-db-subnet-group"

  MetadataDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "20"
      AvailabilityZone: "us-east-1a"
      BackupRetentionPeriod: 7
      DBName: "airflow"
      DBInstanceIdentifier: "airflow-dev-metadata-db-cluster"
      DBInstanceClass: "db.t3.micro"
      DBParameterGroupName: !Ref MetadataDBParameterGroup
      DBSubnetGroupName: !Ref MetadataDBSubnetGroup
      DeletionProtection: "False"
      EnableIAMDatabaseAuthentication: "True"
      Engine: "postgres"
      EngineVersion: "11.7"
      PubliclyAccessible: true
      KmsKeyId: !ImportValue encryption-KMSKeyId
      MasterUsername:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]]
      MasterUserPassword:  !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]]
      Port: "5432"
      SourceRegion: "us-east-1"
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref MetadataDBPublicSecurityGroup
      Tags:
        - Key: Name
          Value: "airflow-dev-metadata-db"

  MetadataDBParameterGroup:
    Type:  AWS::RDS::DBParameterGroup
    Properties:
      Description: Metadata DB Parameter Group
      Family: "postgres11"
      Parameters:
        max_connections: "100"
      Tags:
        - Key: Name
          Value: "airflow-dev-metadata-db-parameter-group"


  MetadataDBSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !ImportValue secrets-MetadataDBSecretId
      TargetId: !Ref MetadataDBInstance
      TargetType: AWS::RDS::DBInstance



  MetadataDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is Airflow Metadata DB secret'
      Name: "airflow-dev-metadata-db-credentials"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "airflow_admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludePunctuation: true
      KmsKeyId: !ImportValue encryption-KMSKeyId
      Tags:
        - Key: Name
          Value: "airflow-dev-metadata-db-secret"

  MetadataDBSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref MetadataDBSecret
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: secretsmanager:DeleteSecret
            Resource: "*"

  AirflowFernetKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "airflow-dev-fernet-key"
      Description: 'This is Fernet Key secret'
      SecretString: '{"fernet_key": "uaBWrD2DJ8l858sFF3wAbtURoRcyjAoq2wg9Wh3CBKQ="}'
      KmsKeyId: !ImportValue encryption-KMSKeyId
      Tags:
        - Key: Name
          Value: "airflow-dev-fernet-key-secret"

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Airflow
      Enabled: true
      EnableKeyRotation: true
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: kms:*
            Resource: '*'
      Tags:
        - Key: Name
          Value: "airflow-dev-kms"


  AirflowECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "airflow-dev-ecs-log-group"
      RetentionInDays: "14"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "airflow-dev-ecs-task-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "ECSTaskRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: "airflow-dev-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "airflow-dev-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "airflow-dev-public-route-table"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "airflow-dev-public-subnet-1"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.2.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "airflow-dev-public-subnet-2"

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1c"
      CidrBlock: "10.0.3.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "airflow-dev-public-subnet-3"

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
