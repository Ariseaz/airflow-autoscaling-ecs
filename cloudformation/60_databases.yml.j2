Description: Creates Airflow Metadata DB with credential managed by AWS secrets

Resources:

  MetadataDBPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Postgres Metadata DB. Public access
      GroupName: "{{ serviceName }}-{{ ENVIRONMENT }}-postgres-public-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: "{{ metadataDb.port }}"
          IpProtocol: -1
          ToPort: "{{ metadataDb.port }}"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "{{ metadataDb.port }}"
          IpProtocol: tcp
          ToPort: "{{ metadataDb.port }}"
        - CidrIp: "{{ service.cidrBlock }}/16"
          FromPort: "{{ metadataDb.port }}"
          IpProtocol: tcp
          ToPort: "{{ metadataDb.port }}"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-postgres-public-security-group"

  MetadataDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Postgres Metadata DB Subnet Group
      DBSubnetGroupName: "{{ serviceName }}-{{ ENVIRONMENT }}-postgres-db-subnet-group"
      SubnetIds:
        - !ImportValue network-PublicSubnet1Id
        - !ImportValue network-PublicSubnet2Id
        - !ImportValue network-PublicSubnet3Id
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-postgres-db-subnet-group"

  MetadataDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "{{ metadataDb.allocatedStorage }}"
      AvailabilityZone: "{{ AWS_REGION }}{{ publicSubnet.1.availabilityZone }}"
      BackupRetentionPeriod: 7
      DBName: "{{ metadataDb.dbName }}"
      DBInstanceIdentifier: "{{ serviceName }}-{{ ENVIRONMENT }}-metadata-bd-cluster"
      DBParameterGroupName: !Ref MetadataDBParameterGroup
      DBSubnetGroupName: !Ref MetadataDBSubnetGroup
      DeletionProtection: "{{ metadataDb.deletionProtection }}"
      EnableIAMDatabaseAuthentication: "{{ metadataDb.enableIAMDatabaseAuthentication }}"
      Engine: "{{ metadataDb.engine }}"
      EngineVersion: "{{ metadataDb.engineVersion }}"
      PubliclyAccessible: true
      KmsKeyId: !ImportValue encryption-KMSKeyId
      MasterUsername: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]] {% endraw %}
      MasterUserPassword: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]] {% endraw %}
      Port: "{{ metadataDb.port }}"
      SourceRegion: "{{ AWS_REGION }}"
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref MetadataDBPublicSecurityGroup
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-metadata-db"

  MetadataDBParameterGroup:
    Type:  AWS::RDS::DBParameterGroup
    Properties:
      Description: Metadata DB Parameter Group
      Family: "{{ metadataDb.family }}"
      Parameters:
        max_connections: "{{ metadataDb.parameters.maxConnections }}"
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-metadata-db-parameter-group"


  SecretMetadataDBAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !ImportValue secrets-MetadataDBSecretId
      TargetId: !Ref MetadataDBInstance
      TargetType: AWS::RDS::DBCluster

  MetadataDBSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretMetadataDBAttachment
    Properties:
      SecretId: !ImportValue secrets-MetadataDBSecretId
      RotationLambdaARN: !ImportValue secrets-SecretRotationLambdaArn
      RotationRules:
        AutomaticallyAfterDays: "{{ metadataDb.secrets.rotationScheduleDays }}"

Outputs:
  MetadataDBHost:
    Value: !GetAtt MetadataDBInstance.Endpoint.Address
    Export:
      Name: database-MetadataDBInstanceHost

  MetadataDBPort:
    Value: !GetAtt MetadataDBInstance.Endpoint.Port
    Export:
      Name: database-MetadataDBInstancePort