Resources:
  FlowerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow Flower
      GroupName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: "{{ service.flower.port }}"
          IpProtocol: tcp
          ToPort: "{{ service.flower.port }}"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-security-group"

  FlowerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "{{ service.flower.cpu }}"
      Memory: "{{ service.flower.memory }}"
      ExecutionRoleArn: !ImportValue iam-ECSTaskRoleArn
      Family: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "{{ serviceName }}-{{ ENVIRONMENT }}-flower"
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.{{ AWS_REGION }}.amazonaws.com/${ecr_repository}:{{ service.imageVersion }}"
            - ecr_repository: !ImportValue ecs-AirflowDockerRepositoryName
          Essential: true
          PortMappings:
            - ContainerPort: "{{ service.flower.port }}"
              HostPort: "{{ service.flower.port }}"
          Command:
            - flower
          Environment:
            - Name: REDIS_HOST
              Value: !ImportValue redis-CeleryBackendHost
            - Name: REDIS_PORT
              Value: !ImportValue redis-CeleryBackendPort
            - Name: POSTGRES_HOST
              Value: !ImportValue database-AuroraDBClusterHost
            - Name: POSTGRES_PORT
              Value: !ImportValue database-AuroraDBClusterPort
            - Name: POSTGRES_USER
              Value: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AuroraDBSecretId, ':SecretString:username}}' ]] {% endraw %}
            - Name: POSTGRES_PASSWORD
              Value: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AuroraDBSecretId, ':SecretString:password}}' ]] {% endraw %}
            - Name: POSTGRES_DB
              Value: c
            - Name: AIRFLOW_BASE_URL
              Value: "{{ service.baseUrl }}"
            - Name: ENABLE_REMOTE_LOGGING
              Value: False
            - Name: STAGE
              Value: "{{ ENVIRONMENT }}"
            - Name: FERNET_KEY
              Value: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-AirflowFernetKeySecretId, ':SecretString:fernet_key}}' ]] {% endraw %}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub
                - "${log_group}/{{ serviceName }}-{{ ENVIRONMENT }}"
                - log_group: !ImportValue cloudwatch-AirflowECSLogGroupName
              awslogs-region: "{{ AWS_REGION }}"
              awslogs-stream-prefix: flower
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-task-definition"